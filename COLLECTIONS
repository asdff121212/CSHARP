--> A Collection is a set of relatedf data that may not necessarily belong to the same data type that can be set or modified dynamically at run-time.
--> In other words, collection is a dynamic array.--> Its Length can increase on runtime. --> AUTO RESIZING
--> Noraml Array's length is fixed, it means we cannot change the length after declaring an array.
-->Array.Resize() 
--> Resize method of an array destroys old array and create a new array with new length.
--> We can never insert a value into a middle of an array, becauses if we want to do this then array length should be increased but we cannot increase the length of an array after declaring thr length of an array.
--> We can never delete a value from a middle of array.
-->Accessing collections is similar to accessing arrays, where elements are accessed by thier index numbers. 

Arrays                                Collection
1) Cannot be resized at run-time.    1) Can be resized at ru-time
2)The individual elements are of the same data type 2)The individual elements can be of different data types.
3)Do not conatian any methods for operations on elements 3) Contains methods for operation on elements
4)We can never insert a value into a middel of an array   4) We can insert a value into a middle of collection
5) We can never delete a value from a middle of an array   5)We can delete a valur from a middle of a collection.


Two Types of Colelctions:
1)Non-Generic Collections--> Stack, ArrayList, Hashtable, sortedList etc --> System.collections namespace have non-generic collections
2)Generic collections --> List<t>, LinkedList<t> , Queue<T>, SortedList<T,V> --> System.Collections.Generic namespace have generic collections.

--> In Array and ArrayList data are stored in key/value format but keys are pre-defined i.e index numbers, it means we cannot explicitly define keys in Array or ArrayList.
--> In HashTable, keys are not pre-definde it means we can explictly define user-defined keys in HashTable. 

Hashtable ht = new Hashtable();
ht.Add(key, value);

Hashtable ht = new Hashtable(){
{"id",1123}}   --> We cannot store duplicate value here i.e duplicate keys


--> Stack = LIFO(Last in - First Out) we use pop and pull method.
--> Queue = FIFO(First in First OUT) we use enqueue and dequeue



## Array --> Type safe(means safe type of data stored) , Fixed length
##Non-Generic --> Not Type safe(means can store different type of data types) , not fixed length
##Generic --> Type safe and not fixed length(auto resizing)


--> List<T> 

-->Dictionary<Tkey, Tvalue>   --> 1) we want to create a collection in which we dont want to access elements through index, we want to store data in key value formant where keys are user-defined and we want to insert same type of data in collection.
